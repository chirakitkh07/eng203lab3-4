import React, { useState, useMemo } from 'react';
import PropTypes from 'prop-types';
import ProductCard from './ProductCard';
import './ProductList.css';

function ProductList({ products, categories, onAddToCart, onViewDetails }) {
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [sortBy, setSortBy] = useState('none'); // 'name', 'price-asc', 'price-desc', 'rating'

  // ‡∏Å‡∏£‡∏≠‡∏á + ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ + ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á
  const processedProducts = useMemo(() => {
    let result = [...products];

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    if (selectedCategory !== 'all') {
      result = result.filter(
        (p) => p.category === selectedCategory
      );
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    if (searchQuery.trim() !== '') {
      const lower = searchQuery.toLowerCase();
      result = result.filter(
        (p) =>
          p.name.toLowerCase().includes(lower) ||
          p.description.toLowerCase().includes(lower)
      );
    }

    // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á
    switch (sortBy) {
      case 'name':
        result.sort((a, b) => a.name.localeCompare(b.name));
        break;
      case 'price-asc':
        result.sort((a, b) => a.price - b.price);
        break;
      case 'price-desc':
        result.sort((a, b) => b.price - a.price);
        break;
      case 'rating':
        result.sort((a, b) => b.rating - a.rating);
        break;
      default:
        break;
    }

    return result;
  }, [products, selectedCategory, searchQuery, sortBy]);

  return (
    <div className="product-list-container">
      <div className="header">
        <h1>üõçÔ∏è ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå</h1>
        <p>Lab 3.2 - ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Components ‡πÅ‡∏•‡∏∞ Props (‡πÄ‡∏â‡∏•‡∏¢)</p>
      </div>

      <div
        style={{ marginBottom: '20px', textAlign: 'center' }}
      >
        <label htmlFor="category-select">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: </label>
        <select
          id="category-select"
          value={selectedCategory}
          onChange={(e) => setSelectedCategory(e.target.value)}
          style={{ padding: '5px', fontSize: '16px' }}
        >
          {categories.map((category) => (
            <option
              key={category.id}
              value={category.id}
            >
              {category.name}
            </option>
          ))}
        </select>

        {/* Search */}
        <input
          type="text"
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          style={{
            padding: '5px',
            fontSize: '16px',
            marginLeft: '15px'
          }}
        />

        {/* Sort */}
        <select
          value={sortBy}
          onChange={(e) => setSortBy(e.target.value)}
          style={{
            padding: '5px',
            fontSize: '16px',
            marginLeft: '15px'
          }}
        >
          <option value="none">‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö</option>
          <option value="name">‡∏ä‡∏∑‡πà‡∏≠ (A ‚Üí Z)</option>
          <option value="price-asc">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥ ‚Üí ‡∏™‡∏π‡∏á</option>
          <option value="price-desc">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á ‚Üí ‡∏ï‡πà‡∏≥</option>
          <option value="rating">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á ‚Üí ‡∏ï‡πà‡∏≥</option>
        </select>
      </div>

      <div className="products-grid">
        {processedProducts.length > 0 ? (
          processedProducts.map((product) => (
            <ProductCard
              key={product.id}
              product={product}
              onAddToCart={onAddToCart}
              onViewDetails={onViewDetails}
            />
          ))
        ) : (
          <div style={{ gridColumn: '1 / -1', textAlign: 'center' }}>
            ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
          </div>
        )}
      </div>
    </div>
  );
}

ProductList.propTypes = {
  products: PropTypes.arrayOf(
    PropTypes.shape({
      id: PropTypes.number.isRequired,
      name: PropTypes.string.isRequired,
      category: PropTypes.string.isRequired,
      price: PropTypes.number.isRequired,
      originalPrice: PropTypes.number.isRequired,
      discount: PropTypes.number.isRequired,
      image: PropTypes.string,
      description: PropTypes.string,
      inStock: PropTypes.bool,
      rating: PropTypes.number
    })
  ).isRequired,
  categories: PropTypes.array.isRequired,
  onAddToCart: PropTypes.func.isRequired,
  onViewDetails: PropTypes.func.isRequired
};

export default ProductList;